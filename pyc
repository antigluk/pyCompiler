#!/usr/bin/python2

from __future__ import print_function

import sys
import string
import os
import argparse
import subprocess

from utils.lexer import lex
from utils.syntax import synt, print_tree
from utils.gen import find_vars, gen_code
from utils import ParserError

VERSION = (0,1)

def print_header():
    print("pyCompiler %d.%d" % VERSION)
    print('-------------------')

def main():
    print_header()

    parser = argparse.ArgumentParser()
    parser.add_argument('file', metavar="FILE", type=str, help='source file name')
    parser.add_argument('-l', '--lex', action="store_true", help="save lexical processing results to file")
    parser.add_argument('-s', '--synt', action="store_true", help="save syntax tree to file")
    parser.add_argument('-v', '--verbose', action="store_true", help="print information")
    parser.add_argument('-c', '--asm', action="store_true", help="save asm file")
    parser.add_argument('-t', '--lst', action="store_true", help="listing")
    parser.add_argument('-no', '--no-optimize', action="store_true", help="no -O2 option for nasm")
    parser.add_argument('-a', '--all-intermediate', action="store_true", help="Synonym for -slc")

    args = parser.parse_args()
    if args.all_intermediate: args.lex = args.asm = args.synt = args.lst = True
    build_files = args.lex or args.asm or args.synt or args.lst

    fl_name = args.file
    fl = dirname = os.path.basename(fl_name)
    # file_name_we = '.'.join(fl.split('.')[:-1])

    dirname = os.path.join(os.path.dirname(fl_name), 'build')

    parts = fl.split('.')
    parts[-1] = 'lex'
    lex_file = os.path.join(dirname, string.join(parts,'.'))

    parts[-1] = 'synt'
    tree_file = os.path.join(dirname, string.join(parts,'.'))

    parts[-1] = 'asm'
    asmfile_name = os.path.join(dirname, string.join(parts,'.'))

    parts[-1] = 'o'
    ofile_name = os.path.join(dirname, string.join(parts,'.'))

    parts[-1] = 'bin'
    binfile_name = os.path.join(os.path.dirname(fl_name), string.join(parts,'.'))

    parts[-1] = 'lst'
    lstfile_name = os.path.join(dirname, string.join(parts,'.'))

    if not os.path.exists(dirname):
        os.mkdir(dirname)

    try:
        if args.verbose: print("Lexical analysis: ", end="")
        lex_l = lex(file(fl_name).read())
        if args.lex:
            lexf = open(lex_file, 'w')
            print(lex_l, file=lexf)
            lexf.close()
        if args.verbose: print("Done")
        
        if args.verbose: print("Syntax analysis: ", end="")
        tree = synt(lex_l)
        if args.synt:
            tree_f = open(tree_file, 'w')
            print(tree, file=tree_f)
            print_tree(tree, f=tree_f)
        if args.verbose: print("Done")

        if args.verbose: print("Find variables and strings: ", end="")
        stat = find_vars(tree)

        if args.synt:
            print("vars =", stat.vars, file=tree_f)
            print("strs =", stat.strs, file=tree_f)
            tree_f.close()
        if args.verbose: print("Done")

        if args.verbose: print("Generate NASM code: ", end="")
        asmfile = open(asmfile_name, 'w')
        gen_code(tree, os.path.basename(fl), stat, f=asmfile)
        asmfile.close()
        if args.verbose: print("Done")

        # stdout = sys.stdout if args.verbose else None
        
        if args.verbose: print("Compiling: ", end="")
        params = ["nasm","-f", "elf", "-o", ofile_name, '-O2' if not args.no_optimize else '', \
                  '-l' if args.lst else '', lstfile_name if args.lst else '', asmfile_name]
        try:
            if args.verbose: print('\n', ' '.join(params))
            res = subprocess.check_output(params)
        except subprocess.CalledProcessError:
            print("NASM Error!", file=sys.stderr)
            print(res)
            sys.exit(-1)
        if not args.asm: os.remove(asmfile_name)
        if args.verbose: print("Done")

        # sleep(1)

        if args.verbose: print("Linking: ", end="")
        params = ["ld", '-s',  "-lc", '-dynamic-linker', '/lib/ld-linux.so.2', '-o', binfile_name, ofile_name]

        try:
            if args.verbose: print('\n', ' '.join(params))
            res = subprocess.check_output(params)
        except subprocess.CalledProcessError:
            print("ld Error!", file=sys.stderr)
            print(res)
            sys.exit(-1)
        if not args.asm: os.remove(ofile_name)
        if args.verbose: print("Done")

    except IOError:
        print()
        print()
        print("ERROR: File not found", file=sys.stderr)
        sys.exit(-1)
    except ParserError, e:
        print()
        print()
        print('ERROR: %s' % e.message, file=sys.stderr)
        # if args.verbose: raise e
        sys.exit(-2)

    if not build_files:
        try:
            os.rmdir(dirname)
        except OSError:
            pass

if __name__ == '__main__':
    main()