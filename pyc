#!/usr/bin/python2

from __future__ import print_function

import sys
import string
import os
import argparse
import subprocess

from utils.lexer import lex
from utils.syntax import synt, print_tree
from utils.gen import find_vars, gen_code
from utils.gen_asm import gen_real_asm
from utils.optimizer import optimize
from utils import ParserError, verbose_output

VERSION = (1,0)

def print_header():
    print("pyCompiler %d.%d" % VERSION)
    print('-------------------')

def build_file_path(fl_name, ext, build_dir=True):
    fl = dirname = os.path.basename(fl_name)

    if build_dir:
        dirname = os.path.join(os.path.dirname(fl_name), 'build')
    else:
        dirname = os.path.dirname(fl_name)

    parts = fl.split('.')
    parts[-1] = ext
    return os.path.join(dirname, string.join(parts,'.'))

@verbose_output
def do_lex(args):
    lex_file = build_file_path(args.file, 'lex')
    print("Lexical analysis: ", end="")
    
    lex_l = lex(file(args.file).read())
    
    if args.lex:
        lexf = open(lex_file, 'w')
        print(lex_l, file=lexf)
        lexf.close()
    
    print("Done")
    
    return lex_l

@verbose_output
def do_synt(args, lex_l):
    tree_file = build_file_path(args.file, 'synt')

    print("Syntax analysis: ", end="")
    
    tree = synt(lex_l)
    
    if args.synt:
        tree_f = open(tree_file, 'w')
        print(tree, file=tree_f)
        print_tree(tree, f=tree_f)
        tree_f.close()
    
    print("Done")

    return tree

@verbose_output
def do_stats(args, tree):
    stats_file = build_file_path(args.file, 'stat')

    print("Find variables and strings: ", end="")
    stat = find_vars(tree)

    if args.synt:
        stats_f = open(stats_file, 'w')
        print("vars =", stat.vars, file=stats_f)
        print("strs =", stat.strs, file=stats_f)
        stats_f.close()
    print("Done")

    return stat

@verbose_output
def do_gen_pseudo_asm(args, tree, stat):
    print("Generate Pseudo-Asm code: ", end="")
    p = gen_code(tree, stat)

    print("Done")

    return p

@verbose_output
def do_gen_asm(args, p):
    fl = os.path.basename(args.file)
    asmfile_name = build_file_path(args.file, 'asm')

    print("Generate NASM code: ", end="")
    
    asmfile = open(asmfile_name, 'w')
    lines = gen_real_asm(p, os.path.basename(fl))

    for line in lines:
        print(line, file=asmfile)

    asmfile.close()

    print("Done")

    return p

@verbose_output
def do_optimization(args, p):
    print("Optimization: ", end="")
    res = optimize(p)
    print("Done")

    return res

@verbose_output
def do_compile(args):
    lstfile_name = build_file_path(args.file, 'lst')
    asmfile_name = build_file_path(args.file, 'asm')
    ofile_name = build_file_path(args.file, 'o')

    print("Compiling: ", end="")

    params = ["nasm","-f", "elf", "-o", ofile_name, '-O2' if not args.no_optimize else '', \
              '-l' if args.lst else '', lstfile_name if args.lst else '', asmfile_name]
    try:
        if args.verbose: print('\n', ' '.join(params))
        subprocess.check_output(params)
    except subprocess.CalledProcessError:
        print("NASM Error!", file=sys.stderr)
        # print(res)
        sys.exit(-1)
    except OSError:
        print("NASM not found", file=sys.stderr)
        sys.exit(-1)

    if not args.asm: os.remove(asmfile_name)
    print("Done")
    
@verbose_output
def do_link(args):
    ofile_name = build_file_path(args.file, 'o')
    binfile_name = build_file_path(args.file, 'bin', build_dir=False)

    print("Linking: ", end="")
    params = ["ld", '-s',  "-lc", '-dynamic-linker', '/lib/ld-linux.so.2', '-o', binfile_name, ofile_name]

    try:
        print('\n', ' '.join(params))
        res = subprocess.check_output(params)
    except subprocess.CalledProcessError:
        print("ld Error!", file=sys.stderr)
        print(res)
        sys.exit(-1)
    except OSError:
        print("ld not found", file=sys.stderr)
        sys.exit(-1)

    if not args.asm: os.remove(ofile_name)
    print("Done")

def main():
    print_header()

    parser = argparse.ArgumentParser()
    parser.add_argument('file', metavar="FILE", type=str, help='source file name')
    parser.add_argument('-l', '--lex', action="store_true", help="save lexical processing results to file")
    parser.add_argument('-s', '--synt', action="store_true", help="save syntax tree to file")
    parser.add_argument('-v', '--verbose', action="store_true", help="print information")
    parser.add_argument('-A', '--asm', action="store_true", help="save asm file")
    parser.add_argument('-L', '--lst', action="store_true", help="listing")
    parser.add_argument('-O0', action="store_true", help="no internal optimization")
    parser.add_argument('-n', '--no-optimize', action="store_true", help="no -O2 option for nasm")
    parser.add_argument('-a', '--all-intermediate', action="store_true", help="Synonym for -slAL")

    args = parser.parse_args()
    if args.all_intermediate: args.lex = args.asm = args.synt = args.lst = True
    build_files = args.lex or args.asm or args.synt or args.lst

    build_dir_name = os.path.join(os.path.dirname(args.file), 'build')

    if not os.path.exists(build_dir_name):
        os.mkdir(build_dir_name)

    try:
        tree = do_synt(args, do_lex(args) )

        p = do_gen_pseudo_asm(args, tree, do_stats(args, tree) )
        if not args.O0:
            p = do_optimization(args, p)
        do_gen_asm(args, p)
        do_compile(args)
        do_link(args)

    except IOError:
        print("\n\nERROR: File not found", file=sys.stderr)
        sys.exit(-1)

    except ParserError, e:
        print('\n\nERROR: %s' % e.message, file=sys.stderr)

        if args.verbose:
            import traceback
            traceback.print_exc()
        sys.exit(-2)

    except NotImplementedError, e:
        print("\n\nNot implemented: %s" % e.message, file=sys.stderr)
        sys.exit(-3)

    if not build_files:
        try:
            os.rmdir(build_dir_name)
        except OSError:
            pass

if __name__ == '__main__':
    main()